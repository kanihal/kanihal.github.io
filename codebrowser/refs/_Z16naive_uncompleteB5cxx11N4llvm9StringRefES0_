<dec f='codebrowser/generator/filesystem.h' l='40' type='std::string naive_uncomplete(llvm::StringRef base, llvm::StringRef path)'/>
<use f='codebrowser/generator/annotator.cpp' l='530' u='c' c='_ZN9Annotator6pathToEN5clang6FileIDES1_PNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='codebrowser/generator/annotator.cpp' l='554' u='c' c='_ZN9Annotator6pathToB5cxx11EN5clang6FileIDEPKNS0_9FileEntryE'/>
<def f='codebrowser/generator/filesystem.cpp' l='158' ll='188' type='std::string naive_uncomplete(llvm::StringRef base, llvm::StringRef path)'/>
<use f='codebrowser/generator/filesystem.cpp' l='164' u='c' c='_Z16naive_uncompleteB5cxx11N4llvm9StringRefES0_'/>
<doc f='codebrowser/generator/filesystem.cpp' l='141'>/**
 * https://svn.boost.org/trac/boost/ticket/1976#comment:2
 *
 * &quot;The idea: uncomplete(/foo/new, /foo/bar) =&gt; ../new
 *  The use case for this is any time you get a full path (from an open dialog, perhaps)
 *  and want to store a relative path so that the group of files can be moved to a different
 *  directory without breaking the paths. An IDE would be a simple example, so that the
 *  project file could be safely checked out of subversion.&quot;
 *
 * ALGORITHM:
 *  iterate path and base
 * compare all elements so far of path and base
 * whilst they are the same, no write to output
 * when they change, or one runs out:
 *   write to output, ../ times the number of remaining elements in base
 *   write to output, the remaining elements in path
 */</doc>
