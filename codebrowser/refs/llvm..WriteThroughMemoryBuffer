<inh f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='42' c='llvm::MemoryBuffer'/>
<def f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='218' ll='260'/>
<use f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='242' c='_ZN4llvm24WriteThroughMemoryBuffer7getFileERKNS_5TwineEl'/>
<use f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='246' c='_ZN4llvm24WriteThroughMemoryBuffer12getFileSliceERKNS_5TwineEmm'/>
<size>24</size>
<doc f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='214'>/// This class is an extension of MemoryBuffer, which allows write access to
/// the underlying contents and committing those changes to the original source.
/// It only supports creation methods that are guaranteed to produce a writable
/// buffer.  For example, mapping a file read-only is not supported.</doc>
<fun r='_ZN4llvm24WriteThroughMemoryBufferC1Ev'/>
<smbr r='llvm::WriteThroughMemoryBuffer::Mapmode' t='const sys::fs::mapped_file_region::mapmode'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer14getBufferStartEv'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer12getBufferEndEv'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer9getBufferEv'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer7getFileERKNS_5TwineEl'/>
<fun r='_ZN4llvm24WriteThroughMemoryBuffer12getFileSliceERKNS_5TwineEmm'/>
