<inh f='include/llvm-7/llvm/Pass.h' l='81' c='llvm::Pass'/>
<def f='include/llvm-7/llvm/Pass.h' l='225' ll='249'/>
<ovr f='include/llvm-7/llvm/Pass.h' l='256' c='llvm::ImmutablePass'/>
<use f='include/llvm-7/llvm/Pass.h' l='256'/>
<use f='include/llvm-7/llvm/Pass.h' l='258' c='_ZN4llvm13ImmutablePassC1ERc'/>
<size>32</size>
<doc f='include/llvm-7/llvm/Pass.h' l='220'>//===----------------------------------------------------------------------===//
/// ModulePass class - This class is used to implement unstructured
/// interprocedural optimizations and analyses.  ModulePasses may do anything
/// they want to the program.
///</doc>
<fun r='_ZN4llvm10ModulePassC1ERc'/>
<fun r='_ZN4llvm10ModulePassD1Ev'/>
<fun r='_ZNK4llvm10ModulePass17createPrinterPassERNS_11raw_ostreamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZN4llvm10ModulePass11runOnModuleERNS_6ModuleE'/>
<fun r='_ZN4llvm10ModulePass17assignPassManagerERNS_7PMStackENS_15PassManagerTypeE'/>
<fun r='_ZNK4llvm10ModulePass27getPotentialPassManagerTypeEv'/>
<fun r='_ZNK4llvm10ModulePass10skipModuleERNS_6ModuleE'/>
