<inh f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='42' c='llvm::MemoryBuffer'/>
<def f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='156' ll='212'/>
<use f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='180' c='_ZN4llvm20WritableMemoryBuffer7getFileERKNS_5TwineElb'/>
<use f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='185' c='_ZN4llvm20WritableMemoryBuffer12getFileSliceERKNS_5TwineEmmb'/>
<use f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='192' c='_ZN4llvm20WritableMemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE'/>
<use f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='198' c='_ZN4llvm20WritableMemoryBuffer15getNewMemBufferEmRKNS_5TwineE'/>
<size>24</size>
<doc f='include/llvm-7/llvm/Support/MemoryBuffer.h' l='152'>/// This class is an extension of MemoryBuffer, which allows copy-on-write
/// access to the underlying contents.  It only supports creation methods that
/// are guaranteed to produce a writable buffer.  For example, mapping a file
/// read-only is not supported.</doc>
<fun r='_ZN4llvm20WritableMemoryBufferC1Ev'/>
<smbr r='llvm::WritableMemoryBuffer::Mapmode' t='const sys::fs::mapped_file_region::mapmode'/>
<fun r='_ZN4llvm20WritableMemoryBuffer14getBufferStartEv'/>
<fun r='_ZN4llvm20WritableMemoryBuffer12getBufferEndEv'/>
<fun r='_ZN4llvm20WritableMemoryBuffer9getBufferEv'/>
<fun r='_ZN4llvm20WritableMemoryBuffer7getFileERKNS_5TwineElb'/>
<fun r='_ZN4llvm20WritableMemoryBuffer12getFileSliceERKNS_5TwineEmmb'/>
<fun r='_ZN4llvm20WritableMemoryBuffer21getNewUninitMemBufferEmRKNS_5TwineE'/>
<fun r='_ZN4llvm20WritableMemoryBuffer15getNewMemBufferEmRKNS_5TwineE'/>
