<def f='include/llvm-7/llvm/ADT/Hashing.h' l='347' ll='350'/>
<def f='include/llvm-7/llvm/ADT/Hashing.h' l='356' ll='360'/>
<use f='include/llvm-7/llvm/ADT/Hashing.h' l='357'/>
<use f='include/llvm-7/llvm/ADT/Hashing.h' l='358'/>
<use f='include/llvm-7/llvm/ADT/Hashing.h' l='365' c='_ZN4llvm7hashing6detail17get_hashable_dataERKT_'/>
<use f='include/llvm-7/llvm/ADT/Hashing.h' l='373' c='_ZN4llvm7hashing6detail17get_hashable_dataERKT_'/>
<use f='include/llvm-7/llvm/ADT/Hashing.h' l='447' c='_ZN4llvm7hashing6detail23hash_combine_range_implEPT_S3_'/>
<doc f='include/llvm-7/llvm/ADT/Hashing.h' l='335'>/// Trait to indicate whether a type&apos;s bits can be hashed directly.
///
/// A type trait which is true if we want to combine values for hashing by
/// reading the underlying data. It is false if values of this type must
/// first be passed to hash_value, and the resulting hash_codes combined.
//
// FIXME: We want to replace is_integral_or_enum and is_pointer here with
// a predicate which asserts that comparing the underlying storage of two
// values of the type for equality is equivalent to comparing the two values
// for equality. For all the platforms we care about, this holds for integers
// and pointers, but there are platforms where it doesn&apos;t and we would like to
// support user-defined types which happen to satisfy this property.</doc>
<doc f='include/llvm-7/llvm/ADT/Hashing.h' l='352'>// Special case std::pair to detect when both types are viable and when there
// is no alignment-derived padding in the pair. This is a bit of a lie because
// std::pair isn&apos;t truly POD, but it&apos;s close enough in all reasonable
// implementations for our use case of hashing the underlying data.</doc>
