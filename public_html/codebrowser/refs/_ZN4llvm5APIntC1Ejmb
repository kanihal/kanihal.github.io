<def f='include/llvm-7/llvm/ADT/APInt.h' l='277' ll='286' type='void llvm::APInt::APInt(unsigned int numBits, uint64_t val, bool isSigned = false)'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='541' u='c' c='_ZN4llvm5APInt11getMinValueEj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='545' u='c' c='_ZN4llvm5APInt17getSignedMinValueEj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='562' u='c' c='_ZN4llvm5APInt15getAllOnesValueEj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='568' u='c' c='_ZN4llvm5APInt12getNullValueEj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='588' u='c' c='_ZN4llvm5APInt12getOneBitSetEjj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='607' u='c' c='_ZN4llvm5APInt10getBitsSetEjjj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='624' u='c' c='_ZN4llvm5APInt14getBitsSetFromEjj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='636' u='c' c='_ZN4llvm5APInt14getHighBitsSetEjj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='648' u='c' c='_ZN4llvm5APInt13getLowBitsSetEjj'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='1725' u='c' c='_ZN4llvm5APInt12doubleToBitsEd'/>
<use f='include/llvm-7/llvm/ADT/APInt.h' l='1733' u='c' c='_ZN4llvm5APInt11floatToBitsEf'/>
<use f='include/llvm-7/llvm/ADT/APSInt.h' l='32' u='c' c='_ZN4llvm6APSIntC1Ejb'/>
<use f='include/llvm-7/llvm/ADT/APSInt.h' l='314' u='c' c='_ZN4llvm6APSInt3getEl'/>
<use f='include/llvm-7/llvm/ADT/APSInt.h' l='315' u='c' c='_ZN4llvm6APSInt11getUnsignedEm'/>
<use f='include/llvm-7/llvm/ADT/APFloat.h' l='878' u='c' c='_ZN4llvm7APFloat6getNaNERKNS_12fltSemanticsEbj'/>
<doc f='include/llvm-7/llvm/ADT/APInt.h' l='264'>/// \name Constructors
  /// @{

  /// Create a new APInt of numBits width, initialized as val.
  ///
  /// If isSigned is true then val is treated as if it were a signed value
  /// (i.e. as an int64_t) and the appropriate sign extension to the bit width
  /// will be done. Otherwise, no sign extension occurs (high order bits beyond
  /// the range of val are zero filled).
  ///
  /// \param numBits the bit width of the constructed APInt
  /// \param val the initial value of the APInt
  /// \param isSigned how to treat signedness of val</doc>
