<dec f='include/llvm-7/llvm/Support/ErrorHandling.h' l='117' type='void llvm::report_bad_alloc_error(const char * Reason, bool GenCrashDiag = true)'/>
<use f='include/llvm-7/llvm/Support/MemAlloc.h' l='29' u='c' c='_ZN4llvm11safe_mallocEm'/>
<use f='include/llvm-7/llvm/Support/MemAlloc.h' l='37' u='c' c='_ZN4llvm11safe_callocEmm'/>
<use f='include/llvm-7/llvm/Support/MemAlloc.h' l='44' u='c' c='_ZN4llvm12safe_reallocEPvm'/>
<use f='include/llvm-7/llvm/ADT/SmallVector.h' l='242' u='c' c='_ZN4llvm23SmallVectorTemplateBase4growEm'/>
<doc f='include/llvm-7/llvm/Support/ErrorHandling.h' l='105'>/// Reports a bad alloc error, calling any user defined bad alloc
/// error handler. In contrast to the generic &apos;report_fatal_error&apos;
/// functions, this function is expected to return, e.g. the user
/// defined error handler throws an exception.
///
/// Note: When throwing an exception in the bad alloc handler, make sure that
/// the following unwind succeeds, e.g. do not trigger additional allocations
/// in the unwind chain.
///
/// If no error handler is installed (default), then a bad_alloc exception
/// is thrown, if LLVM is compiled with exception support, otherwise an assertion
/// is called.</doc>
