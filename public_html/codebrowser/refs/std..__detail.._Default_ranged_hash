<def f='include/c++/7/bits/hashtable_policy.h' l='456'/>
<use f='include/c++/7/bits/hashtable_policy.h' l='1244'/>
<use f='include/c++/7/bits/hashtable_policy.h' l='1256'/>
<use f='include/c++/7/bits/hashtable_policy.h' l='1275' c='_ZNSt8__detail15_Hash_code_baseIT_T0_T1_T2_T3_NS_20_Default_ranged_hashELb0EEC1ERKS3_RKS4_RKS5_RKS6_'/>
<use f='include/c++/7/bits/hashtable_policy.h' l='1334'/>
<use f='include/c++/7/bits/hashtable_policy.h' l='1342'/>
<use f='include/c++/7/bits/hashtable_policy.h' l='1363' c='_ZNSt8__detail15_Hash_code_baseIT_T0_T1_T2_T3_NS_20_Default_ranged_hashELb1EEC1ERKS3_RKS4_RKS5_RKS6_'/>
<use f='include/c++/7/bits/unordered_map.h' l='51'/>
<use f='include/c++/7/bits/unordered_map.h' l='68'/>
<size>1</size>
<doc f='include/c++/7/bits/hashtable_policy.h' l='451'>/// Default ranged hash function H.  In principle it should be a
  /// function object composed from objects of type H1 and H2 such that
  /// h(k, N) = h2(h1(k), N), but that would mean making extra copies of
  /// h1 and h2.  So instead we&apos;ll just use a tag to tell class template
  /// hashtable to do that composition.</doc>
<use f='include/c++/7/bits/unordered_set.h' l='49'/>
<use f='include/c++/7/bits/unordered_set.h' l='65'/>
<size>1</size>
