<inh f='include/llvm-7/llvm/Support/raw_ostream.h' l='46' c='llvm::raw_ostream'/>
<def f='include/llvm-7/llvm/Support/raw_ostream.h' l='341' ll='358'/>
<ovr f='include/llvm-7/llvm/Support/raw_ostream.h' l='366' c='llvm::raw_fd_ostream'/>
<use f='include/llvm-7/llvm/Support/raw_ostream.h' l='366'/>
<ovr f='include/llvm-7/llvm/Support/raw_ostream.h' l='504' c='llvm::raw_svector_ostream'/>
<use f='include/llvm-7/llvm/Support/raw_ostream.h' l='504'/>
<ovr f='include/llvm-7/llvm/Support/raw_ostream.h' l='533' c='llvm::raw_null_ostream'/>
<use f='include/llvm-7/llvm/Support/raw_ostream.h' l='533'/>
<size>40</size>
<doc f='include/llvm-7/llvm/Support/raw_ostream.h' l='338'>/// An abstract base class for streams implementations that also support a
/// pwrite operation. This is useful for code that can mostly stream out data,
/// but needs to patch in a header that needs to know the output size.</doc>
<fun r='_ZN4llvm17raw_pwrite_stream11pwrite_implEPKcmm'/>
<fun r='_ZN4llvm17raw_pwrite_stream6anchorEv'/>
<fun r='_ZN4llvm17raw_pwrite_streamC1Eb'/>
<fun r='_ZN4llvm17raw_pwrite_stream6pwriteEPKcmm'/>
